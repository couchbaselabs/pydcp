#!/usr/bin/env python

import argparse
import logging

try:
    import unittest2 as unittest
except ImportError:
    import unittest

from unit import *

def suite_runner(suite, toxml = False):
    if toxml == True:
        try:
            import xmlrunner
            xmlrunner.XMLTestRunner(verbosity=2, output="results").run(suite)
        except ImportError:
            print "unable to import xmlrunner, try: pip install xmlrunner"
            toxml = False

    if toxml == False:
        unittest.TextTestRunner(verbosity=2).run(suite)

def run_upr_testsuite(backend, host, port, toxml = False):
    upr_suite = unittest.TestSuite()
    upr_suite.addTest(ParametrizedTestCase.parametrize(UprTestCase, backend,
                                                       host, port))
    suite_runner(upr_suite, toxml)

def run_mcd_testsuite(backend, host, port, toxml = False):
    mcd_suite = unittest.TestSuite()
    mcd_suite.addTest(ParametrizedTestCase.parametrize(McdTestCase, backend,
                                                       host, port))
    suite_runner(mcd_suite, toxml)

def run_exp_testsuite(backend, host, port, toxml = False):
    exp_suite = unittest.TestSuite()
    #exp_suite.addTest(UprTestCase('test_stream_request_with_deletes'))
    exp_suite.addTest(McdTestCase('test_delete'))
    suite_runner(exp_suite, toxml)

def run_testsuite(suite, backend, host, port, toxml = False):
    if suite == 'all':
        run_upr_testsuite(backend, host, port, toxml)
        run_mcd_testsuite(backend, host, port, toxml)
    elif suite == 'upr':
        run_upr_testsuite(backend, host, port, toxml)
    elif suite == 'mcd':
        run_mcd_testsuite(backend, host, port, toxml)
    elif suite == 'exp':
        run_exp_testsuite(backend, host, port, toxml)
    else:
        print "Invalid testsuite type '%s'" % suite
        sys.exit(0)

def get_remote_server(backend):
    if backend == 'cb':
        return RemoteServer.CB
    elif backend == 'dev':
        return RemoteServer.DEV
    elif backend == 'mcd':
        return RemoteServer.MCD
    else:
        print "Invalid backend server type '%s'" % backend
        sys.exit(0)

def set_log_level(level):
    if level == None:
        logging.basicConfig(level=logging.ERROR)
    elif level == 1:
        logging.basicConfig(level=logging.WARNING)
    elif level == 2:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.DEBUG)

def main():
    parser = argparse.ArgumentParser(prog='pyupr',
                                     usage='%(prog)s [options]',
                                     add_help=False)

    parser.add_argument('-h', '--host', default='127.0.0.1',
                        help='the ip address of the server')
    parser.add_argument('-p', '--port', default=11211,
                        help='the port the server is running on')
    parser.add_argument('-s', '--suite', default='all',
                        help='testsuite to execute')
    parser.add_argument('-b', '--backend', default='cb',
                        help='backend server to run against')
    parser.add_argument('-v', '--verbosity', action='count',
                        help='verbosity level')
    parser.add_argument('-x', '--xml', action='store_true',
                        help='xml test results')

    args = parser.parse_args()
    backend = get_remote_server(args.backend)
    set_log_level(args.verbosity)
    run_testsuite(args.suite, backend, args.host, int(args.port), args.xml)

if __name__ == "__main__":
    main()
