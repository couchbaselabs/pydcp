#!/usr/bin/env python

import argparse
import logging

try:
    import unittest2 as unittest
except ImportError:
    import unittest

from unit import *

def run_as_unittest_suite(suite):
    unittest.TextTestRunner(verbosity=2).run(suite)

def run_as_xml_suite(suite):
    import xmlrunner
    xmlrunner.XMLTestRunner(verbosity=2, output="results").run(suite)

def run_upr_testsuite(backend, host, port, xml):
    upr_suite = unittest.TestSuite()
    upr_suite.addTest(ParametrizedTestCase.parametrize(UprTestCase, backend,
                                                       host, port))
    if xml:
        run_as_xml_suite(upr_suite)
    else:
        run_as_unittest_suite(upr_suite)


def run_mcd_testsuite(backend, host, port, xml):
    mcd_suite = unittest.TestSuite()
    mcd_suite.addTest(ParametrizedTestCase.parametrize(McdTestCase, backend,
                                                       host, port))
    if xml:
        run_as_xml_suite(mcd_suite)
    else:
        run_as_unittest_suite(mcd_suite)

def run_exp_testsuite(backend, host, port, xml):
    exp_suite = unittest.TestSuite()
    exp_suite.addTest(ParametrizedTestCase.parametrize(ExpTestCase, backend,
                                                       host, port))
    if xml:
        run_as_xml_suite(exp_suite)
    else:
        run_as_unittest_suite(exp_suite)

def run_testsuite(suite, backend, host, port, xml):
    if suite == 'all':
        run_upr_testsuite(backend, host, port, xml)
        run_mcd_testsuite(backend, host, port, xml)
    elif suite == 'upr':
        run_upr_testsuite(backend, host, port, xml)
    elif suite == 'mcd':
        run_mcd_testsuite(backend, host, port, xml)
    elif suite == 'exp':
        run_exp_testsuite(backend, host, port, xml)
    else:
        print "Invalid testsuite type '%s'" % suite
        sys.exit(0)

def get_remote_server(backend):
    if backend == 'cb':
        return RemoteServer.CB, 11210
    elif backend == 'dev':
        return RemoteServer.DEV, 12000
    elif backend == 'mcd':
        return RemoteServer.MCD, 5000
    else:
        print "Invalid backend server type '%s'" % backend
        sys.exit(0)

def set_log_level(level):
    if level == None:
        logging.basicConfig(level=logging.ERROR)
    elif level == 1:
        logging.basicConfig(level=logging.WARNING)
    elif level == 2:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.DEBUG)

def main():
    parser = argparse.ArgumentParser(prog='pyupr',
                                     usage='%(prog)s [options]',
                                     add_help=False)

    parser.add_argument('-h', '--host', default='127.0.0.1:9000',
                        help='the ip:port address of the server')
    parser.add_argument('-s', '--suite', default='all',
                        help='testsuite to execute')
    parser.add_argument('-b', '--backend', default='cb',
                        help='backend server to run against')
    parser.add_argument('-v', '--verbosity', action='count',
                        help='verbosity level')
    parser.add_argument('-x', '--xml', action='store_true', default=False)

    args = parser.parse_args()
    backend, port = get_remote_server(args.backend)
    set_log_level(args.verbosity)
    run_testsuite(args.suite, backend, args.host, port, args.xml)

if __name__ == "__main__":
    main()
