#!/usr/bin/env python

import argparse
import logging
import sys

try:
    import unittest2 as unittest
except ImportError:
    import unittest

from unit import *

class PyDCP:

    def __init__(self, suite, backend, hosts, port, ssh_username, ssh_password, xml, only_tc, os_type,
                 collect_stats, bucket_type):
        self.suite = suite
        self.backend = backend
        self.hosts = hosts
        self.host = hosts[0]
        self.port = port
        self.ssh_username = ssh_username
        self.ssh_password = ssh_password
        self.xml = xml
        self.only_tc = only_tc
        self.os_type = os_type
        self.collect_stats = collect_stats
        self.bucket_type = bucket_type


    def run_test(self):

        if self.suite == 'all':

            if self.only_tc is not None:
                self.run_singular()
            else:
                self.run_suite(DcpTestCase)
                self.run_suite(McdTestCase)
                if len(self.hosts) > 1:
                    self.run_suite(RebTestCase)

        elif self.suite == 'dcp':
            self.run_suite(DcpTestCase)
        elif self.suite == 'mcd':
            self.run_suite(McdTestCase)
        elif self.suite == 'exp':
            self.run_suite(ExpTestCase)
        elif self.suite == 'reb':
            if len(self.hosts) <= 1:
                    print "At least 2 hosts required to run rebalance suite"
                    sys.exit(0)
            self.run_suite(RebTestCase)
        else:
            try:
                self.run_suite(eval(self.suite))
            except NameError:
                print "Invalid testsuite type '%s'" % self.suite
                sys.exit(0)

    def run_suite(self, testcase_klass):
        kwargs = self.__dict__
        kwargs['testcase_klass'] = testcase_klass


        suite = unittest.TestSuite()
        suite.addTest(ParametrizedTestCase.parametrize(**kwargs))

        if self.xml:
            import xmlrunner
            xmlrunner.XMLTestRunner(verbosity=2, output="results").run(suite)
        else:
            unittest.TextTestRunner(verbosity=2).run(suite)

    def run_singular(self):

        if self.only_tc.find('.') != -1:
            klass, self.only_tc = self.only_tc.split('.')
        else:
            klass = 'DcpTestCase'

        try:
            testcase_klass = eval(klass)
            self.run_suite(testcase_klass)
        except NameError:
            print "TestClass does not exist: %s" % klass
            sys.exit(0)



def get_remote_server(backend):
    if backend == 'cb':
        return RemoteServer.CB, 11210
    elif backend == 'dev':
        return RemoteServer.DEV, 12000
    elif backend == 'mcd':
        return RemoteServer.MCD, 5000
    else:
        print "Invalid backend server type '%s'" % backend
        sys.exit(0)

def set_log_level(level):
    if level == None:
        logging.basicConfig(level=logging.ERROR)
    elif level == 1:
        logging.basicConfig(level=logging.WARNING)
    elif level == 2:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.DEBUG)

def main():
    parser = argparse.ArgumentParser(prog='pydcp',
                                     usage='%(prog)s [options]',
                                     add_help=False)

    parser.add_argument('-h', '--hosts', default=['127.0.0.1:9000'], nargs='+',
                        help='the ip:port address of the server(s) to test')
    parser.add_argument('-s', '--suite', default='all',
                        help='testsuite to execute')
    parser.add_argument('-b', '--backend', default='cb',
                        help='backend server to run against')
    parser.add_argument('-t', '--os_type', default='linux',
                        help='backend server to run against')
    parser.add_argument('-tc', '--collect_stats', default=False,
                        help='collect atop type stats')
    parser.add_argument('-v', '--verbosity', action='count',
                        help='verbosity level')
    parser.add_argument('-x', '--xml', action='store_true', default=False)
    parser.add_argument('-o', '--only',
                        help='specifiy the only test to run from a particular suite')

    parser.add_argument('-u', '--ssh_username',  help='ssh_username for remote operations')
    parser.add_argument('-p', '--ssh_password',  help='ssh_password for remote operations')
    parser.add_argument('-c', '--bucket_type', default='membase',
                        help='membase or ephemeral')

    args = parser.parse_args()
    backend, port = get_remote_server(args.backend)
    set_log_level(args.verbosity)
    pyDcp = PyDCP(args.suite, backend, args.hosts, port, args.ssh_username, args.ssh_password, args.xml,
                  args.only, args.os_type, args.collect_stats, args.bucket_type)
    pyDcp.run_test()

if __name__ == "__main__":
    main()
